<div class="row">
  <div class="col-md-9">
    <div class="oro-metrics__marco">
      <div class="oro-metrics__glass">

      </div>
      <div class="oro-metrics__media" id="media_frontal">
        <canvas class="oro-metrics__canvas center-block" id="canvas-frontal" width="150" height="150">
          <img class="oro-matrics__foto img-responsive center-block" src="<%= @foto.img_frontal %>" alt="">
        </canvas>
      </div>
      <div class="oro-metrics__media" id="media_lateral">
        <canvas class="oro-metrics__canvas center-block" id="canvas-lateral" width="150" height="150">
          <img class="oro-matrics__foto img-responsive center-block" src="<%= @foto.img_lateral %>" alt="">
        </canvas>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="oro-metrics__info">
      <p>
        <strong>F subida:</strong>
        <%= @foto.f_subida %>
      </p>
      <p>
        <strong>Foto titulo:</strong>
        <%= @foto.foto_titulo %>
      </p>
      <p>
        <strong>Usuario:</strong>
        <%= @foto.usuario.nombres %>
      </p>
      <p>
        <strong>Paciente:</strong>
        <%= @foto.paciente.nombre %>
      </p>

      <%= link_to 'Editar', edit_foto_path(@foto) %> |
      <%= link_to 'Regresar', fotos_path %>
    </div>
  </div>
</div>
<scirpt src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/2.0.0/fabric.min.js"></scirpt>
<script type="text/javascript" charset="utf-8">
    $('.oro-subnavbar__link').removeClass('oro-subnavbar__link--active');
    $('#nav-matrics').addClass('oro-subnavbar__link--active');
    frontal = new Canvas('canvas-frontal','<%= @foto.img_frontal %>', 'media_frontal');
    lateral = new Canvas('canvas-lateral','<%= @foto.img_lateral %>', 'media_lateral');

    function Canvas(id, src, parent){
        this.id = id;
        this.parent = parent;
        this.canvas = null;
        this.width = 0;
        this.height = 0;
        this.ctx = null;
        this.src = src;
        this.img = null;
        this.beginLoad = true;
        this.eventsLoad = false;
        this.draw = function(){drawCanvas(this)};
        this.trichion = null;
    }

    $(document).ready(function(){
        frontal.draw();
        lateral.draw();
    });

    function drawCanvas(obj){
        console.log("[drawCanvas] > "+ obj.id);
        obj.canvas = document.getElementById(obj.id);
        if (obj.canvas.getContext){
            obj.ctx = obj.canvas.getContext('2d');
            initEventsCanvas(obj);
            insertImage(obj);
            obj.ctx.save();
        } else {
            // canvas-unsupported code here
        }
    }

    function initEventsCanvas(obj) {
        if (obj.eventsLoad === false){
            obj.canvas.addEventListener("click", function (e) {
                drawPointActive(obj, e);
            });
            obj.eventsLoad = true;
        }
    }

    function  insertImage(obj) {
        obj.img = new Image();
        obj.img.onload = function() {
            if(obj.beginLoad){
                obj.beginLoad = false;
                resizeCanvasToImage(obj,obj.img);
                obj.draw();
            }
            obj.ctx.drawImage(obj.img, 0, 0, obj.canvas.width, obj.canvas.height);
        };
        obj.img.src = obj.src;
    }

    function resizeCanvasToImage(obj,img){
        obj.beginLoad = false;
        obj.canvas.width = img.width;
        obj.canvas.height = img.height;
        // para validar maximo ancho
        let parent = '#'+obj.parent;
        console.log(parent);
        let maxWidth = $(parent).width();
        if( img.width > maxWidth) {
            resizeCanvasTo(maxWidth,obj);
        }
        //si el canvas es mas grande que el body
        if( $('body').width() <  obj.canvas.width){
            maxWidth = $('body').width() + (img.width/6);
            if( img.width > maxWidth){
                resizeCanvasTo(maxWidth,obj);
            }
        }
    }

    function resizeCanvasTo(widthResize,obj){
        let porcent = (widthResize / obj.img.width) * 100;
        let reduceWidth =  (obj.img.width  / 100) * porcent;
        let reduceHeight =  (obj.img.height  / 100) * porcent;
        obj.canvas.width = obj.img.width - reduceWidth;
        obj.canvas.height = obj.img.height - reduceHeight;
    }

    function getMousePos(obj, evt) {
        let rect = obj.canvas.getBoundingClientRect();
        return {
            x: evt.clientX - rect.left,
            y: evt.clientY - rect.top
        };
    }

    function drawPointActive(obj,evt){

        let position = getMousePos(obj,evt);
        let widthPoint = 12;
        let heightPoint = 12;
        //obj.ctx.fillRect(position.x - (widthPoint/2),position.y - (heightPoint/2) ,widthPoint,heightPoint);

        obj.trichion = {
            'position': position,
            'widthPoint' : widthPoint,
            'heightPoint': heightPoint };
        drawPoints(obj);
    }

    function drawPoints(obj){
        let promise = new Promise((resolve, reject) => {
            obj.draw();
            setTimeout(()=>resolve(obj),200)
        });
        promise.then((obj) => {
            drawPoint(obj,obj.trichion)
        });
    }

    function drawPoint(obj,point){
        console.log('[drawPoint]');
        obj.ctx.fillRect(point.position.x - (point.widthPoint/2),point.position.y - (point.heightPoint/2) ,point.widthPoint,point.heightPoint);
    }

</script>


